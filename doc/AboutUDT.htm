<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:10.0pt;
	margin-left:0cm;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:3.0pt;
	margin-left:0cm;
	text-indent:42.55pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	font-style:italic;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Основной текст Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	line-height:150%;
	background:white;
	text-autospace:none;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	color:black;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Текст выноски Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
span.a
	{mso-style-name:"Основной текст Знак";
	mso-style-link:"Основной текст";
	font-family:"Times New Roman","serif";
	color:black;
	background:white;}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
span.a0
	{mso-style-name:"Текст выноски Знак";
	mso-style-link:"Текст выноски";
	font-family:"Tahoma","sans-serif";}
span.pl-c
	{mso-style-name:pl-c;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=RU>

<div class=WordSection1>

<p class=MsoBodyText style='line-height:normal'><b>Что такое система </b><b><span
lang=EN-US>UDT</span>?</b></p>

<p class=MsoBodyText style='line-height:normal'>Система <span lang=EN-US>UDT</span><span
lang=EN-US> </span>предназначена для обмена данными между взаимосвязанными
программами, работающих как на одной ЭВМ так и на разных, приёма и передачи
данных по каналам  <span lang=EN-US>RS</span> 485(<span lang=EN-US>RS</span>422,
<span lang=EN-US>RS</span>232), <span lang=EN-US>UDP</span>, <span lang=EN-US>TCP</span>,
<span lang=EN-US>UnixSocket</span>, <span lang=EN-US>Fifo</span>(<span
lang=EN-US>Pipe</span>), <span lang=EN-US>SharedMemory</span>, <span
lang=EN-US>QnxMessage</span>,  автоматической маршрутизации пакетов разных
протоколов приёма-передачи данных, их проверку и преобразование в  формат <span
lang=EN-US>XML</span>(<span lang=EN-US>Json</span>), резервирование каналов
передачи данных, оптимизации трафика, отладки взаимодействия ПО. Или, проще
говоря, <span lang=EN-US>UDT</span><span lang=EN-US> </span>облегчает отладку обмена
данными между  несколькими программами.  </p>

<h2><span style='font-size:12.0pt;font-family:"Times New Roman","serif";
font-style:normal'>Принцип работы системы.</span></h2>

<p class=MsoBodyText style='text-indent:0cm;line-height:normal'>Рассмотрим
принцип работы на следующем примере.</p>

<p class=MsoBodyText style='text-indent:35.4pt;line-height:normal'>Допустим
есть 3 программы А, В и С расположенные на разных ЭВМ. Программа А должна  отправлять
сообщение №1 программе В и сообщение №2 программе С. Все три программы
обмениваются информацией по некоторому протоколу «Протокол». </p>

<p class=MsoBodyText style='line-height:normal'>Для понимания принципа
построения система, рассмотрим вначале реализацию  «в лоб» например с
использованием <span lang=EN-US>UDP</span>. Разработчики программ  С, <span
lang=EN-US>B</span><span lang=EN-US> </span>создают сокет и открывают <span
lang=EN-US>udp</span> порт  номер 0<span lang=EN-US>x</span>С и 0<span
lang=EN-US>xB</span><span lang=EN-US> </span>соответственно. Далее разрабатывают
функцию, обрабатывающую наш протокол.  Разработчик программы <span lang=EN-US>A</span><span
lang=EN-US> </span>открывает порт 0<span lang=EN-US>xA</span>, далее, при
необходимости, отправляет сообщение №1 программе <span lang=EN-US>B</span> и сообщение
№2 программе №1. В случае неизменной архитектуры взаимодействия ПО проблемы с таким
 подходом не возникают. Усложним систему, допустим через полгода после
разработки программы А, понадобилось дополнительно отправлять сообщение №1 в
новую программу <span lang=EN-US>D</span>. Тогда в программе А  необходимо
изменить функцию отправляющую сообщение №1. А вы уверены, что после этого
исправления она будет работать? Конечно, нет. Получается что, для добавления
нового приходить исправлять старое. И в этом проблема. Причём под новым
понимается не только новая программа, но и, например: новое сообщение, новый интерфейс
передачи данных(<span lang=EN-US>UDP</span>,<span lang=EN-US>TCP</span>, <span
lang=EN-US>RS</span><span lang=EN-US> </span> и т.д.), новая версия протокола,
новая архитектура и т.д. А если понадобилось резервирование обмена данными или
разработчик программы банально уволился, то проблемы с передачей данных начинают
увеличиваться в геометрической прогрессии. </p>

<p class=MsoBodyText style='line-height:normal'>Система <span lang=EN-US>UDT</span><span
lang=EN-US> </span>построена иначе: вместо принципа программа А должна  отправлять 
сообщение №1 программе В, используется принцип программа В должна получать сообщение
№1 от программы А. Таким образом, в приведённом примере, для передачи сообщения
№1 программе <span lang=EN-US>D</span>, нет необходимости изменять программу А,
достаточно дополнительно «указать», что программа <span lang=EN-US>D</span>
должна получать сообщение №1 от программы А. Если не понятно, то см. схему ниже.
Как видно из схемы в системе <span lang=EN-US>UDT</span><span lang=EN-US> </span>есть
ядро, которое отвечает за рассылку сообщений между программами.   Очевидно, что
невозможно  управлять рассылкой сообщений между программами, если нет данных об
их идентификаторах и информации о протоколе передачи данных между ними.</p>

<p class=MsoBodyText style='line-height:normal'>&nbsp;</p>

<p class=MsoBodyText style='text-indent:14.2pt;line-height:normal'><img
width=579 height=173 id="Рисунок 1" src="AboutUDT.files/image001.jpg"></p>

<p class=MsoBodyText style='line-height:normal'><b>&nbsp;</b></p>

<p class=MsoBodyText style='line-height:normal'><b>&nbsp;</b></p>

<p class=MsoBodyText style='line-height:normal'><b>Идентификатор ПО</b></p>

<p class=MsoBodyText style='line-height:normal'>&nbsp;</p>

<p class=MsoBodyText style='line-height:normal'>В системе <span lang=EN-US>UDT</span><span
lang=EN-US> </span>каждой пользовательской программе соответствует два идентификатора.
Первый – это уникальный номер (далее <span lang=EN-US>UUID</span>),
присваиваемый системой <span lang=EN-US>UDT</span><span lang=EN-US> </span>программе
при старте. Основное его назначение – это  позволить исполнять одновременно
нескольких копий ПО. Для этого номер генерируется по случайному закону, поэтому
одной и той же копии ПО соответствуют разные номера. Чтобы гарантировать
уникальность <span lang=EN-US>UUID</span>, в его номер можно добавить
детерминированное число. Оно задаётся в  настроечном файле.  Второй
идентификатор – это идентификатор пользовательской программы (далее имя ПО). Он
представляет собой строку с кодировкой <span lang=EN-US>utf</span>8, задаваемой
пользователем (см. модуль «динамическая библиотека пользователя» или настроечный
файл тэг «rrdname»). Имя ПО  может состоять из любых символов <span lang=EN-US>Unicode</span>
в нижнем регистре кроме «@» и «.». Символ @ используется для задание подгрупп
пользовательского ПО в следующем формате: «имя@подгрупа1.подгрупа2.подгрупа3…».
Проще говоря, имя имеет формат электронной почты, за исключением того имя
домена записывается слева направо. Например, если в качестве идентификатора ПО
использовать электронную почту «<span class=pl-c><span lang=EN-US>UDT</span>@gmail.com»,
то его имя в системе </span><span class=pl-c><span lang=EN-US>UDT</span><span
lang=EN-US> </span>записывается как «</span><span class=pl-c><span lang=EN-US>UDT</span>@com.gmail».</span>
Если две пользовательские программы принадлежат разным подгруппам, то обмен
данными между ними ограничен (см. модуль «динамическая библиотека пользователя).
Например, ПО с именем «программа_а@группа_а»  может взаимодействовать с ПО
«программа_<span lang=EN-US>b</span>@группа_<span lang=EN-US>a</span>», а с ПО
«программа_<span lang=EN-US>b</span>@группа_<span lang=EN-US>b</span>» нет. </p>

<p class=MsoBodyText style='line-height:normal'><b>&nbsp;</b></p>

<p class=MsoBodyText style='line-height:normal'><b>Протокол передачи данных
между программами</b></p>

<p class=MsoBodyText style='line-height:normal'>&nbsp;</p>

<p class=MsoBodyText style='line-height:normal'>В системе <span lang=EN-US>UDT</span><span
lang=EN-US> </span>пользователю доступно два типа протокола. Первый –
встроенный протокол передачи данных, его идентификатор «<span lang=EN-US>raw</span>».
В этом протоколе сообщения различаются только идентификационным номером,
задаваемым пользователем. Поскольку  этот протокол встроенный, то номер
сообщения  передаётся отдельно от самого сообщения. Т.е. в самом сообщении
номер нигде не хранится.  Второй тип протоколов – это внешние протоколы,
созданные пользователем (см модуль «обработки прокола обмена данными»).  Поскольку
эти протоколы внешние по отношению к системе, то сообщения должны содержать в
себе идентифицирующую информацию. Или более простым языком, если пользователь добавляет
свой протокол, то система <span lang=EN-US>UDT</span><span lang=EN-US> </span>должна
иметь возможность найти сообщение в буфере данных, а это сделать невозможно,
если в сообщении не будет содержаться идентифицирующая информация. Со
встроенным протоколом ситуация иная, система <span lang=EN-US>UDT</span><span
lang=EN-US> </span>знает какой размер сообщения передаётся и где оно располагается,
единственное чего не хватает  это идентификатора, который задаёт пользователь. </p>

</div>

</body>

</html>
