name: CI

on: [push]

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          ubuntu-gcc-6,
          ubuntu-gcc-9,
          ubuntu-clang-6,
          ubuntu-clang-9,
        ]
        include:
          - name: ubuntu-gcc-6
            os: ubuntu-16.04
            compiler: gcc
            version: "6"

          - name: ubuntu-gcc-9
            os: ubuntu-latest
            compiler: gcc
            version: "9"

          - name: ubuntu-clang-6
            os: ubuntu-16.04
            compiler: clang
            version: "6.0"

          - name: ubuntu-clang-9
            os: ubuntu-latest
            compiler: clang
            version: "9"
    steps:
      - uses: actions/checkout@v1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
            # LLVM 9 is not yet in Bionic's repositories.
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
            sudo apt-get update
            sudo apt-get install -y ninja-build clang-tidy-9
            sudo apt-get install libboost-all-dev
            sudo ln -s /usr/bin/clang-tidy-9 /usr/local/bin/clang-tidy
            if [ "${{ matrix.compiler }}" = "gcc" ]; then
              sudo apt-get install -y g++-${{ matrix.version }}
              echo "::set-env name=CC::gcc-${{ matrix.version }}"
              echo "::set-env name=CXX::g++-${{ matrix.version }}"
            else
              sudo apt-get install -y clang-${{ matrix.version }}
              echo "::set-env name=CC::clang-${{ matrix.version }}"
              echo "::set-env name=CXX::clang++-${{ matrix.version }}"
            fi
      - name: Print version
        run: |
          cmake --version
          gcc --version
          clang --version

      - name: configure
        run: mkdir build && cd build && cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=/usr/include/boost ..
      - name: build
        run: cd build && cmake --build . --target install
      - name: Testing RTC
        run: |
         cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
         (timeout --signal=SIGABRT 10 ./Kernel -c ./test/test_kernel.json &) && (timeout --signal=SIGABRT 10 ./test_rtc) && kill -SIGINT `pgrep Kernel`
      - name: Testing inheritance
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 10 ./Kernel &) && (timeout --signal=SIGABRT 10 ./test_inheritance) && kill -SIGINT `pgrep Kernel`
      - name: Testing errors
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 30 ./Kernel &) && (timeout --signal=SIGABRT 30 ./test_errors) && kill -SIGINT `pgrep Kernel`
      - name: Testing selection
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 30 ./Kernel &) && (timeout --signal=SIGABRT 30 ./test_selection) && kill -SIGINT `pgrep Kernel`
      - name: Testing high load
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 40 ./Kernel &) && (timeout --signal=SIGABRT 40 ./test_of_speed) && kill -SIGINT `pgrep Kernel`