name: CI

on: [push]

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          ubuntu-gcc-6,
          ubuntu-gcc-9,
          ubuntu-clang-6,
#          ubuntu-clang-9,
        ]
        include:
          - name: ubuntu-gcc-6
            os: ubuntu-16.04
            compiler: gcc
            version: "6"

          - name: ubuntu-gcc-9
            os: ubuntu-latest
            compiler: gcc
            version: "9"

          - name: ubuntu-clang-6
            os: ubuntu-16.04
            compiler: clang
            version: "6.0"

#          - name: ubuntu-clang-9
#            os: ubuntu-latest
#            compiler: clang
#            version: "9"
    steps:
      - uses: actions/checkout@v1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
            # LLVM 9 is not yet in Bionic's repositories.
            #sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
            sudo apt-get update
            #sudo apt-get install -y ninja-build clang-tidy-9
            sudo apt-get install libboost-all-dev
            #sudo ln -s /usr/bin/clang-tidy-9 /usr/local/bin/clang-tidy
            if [ "${{ matrix.compiler }}" = "gcc" ]; then
              sudo apt-get install -y g++-${{ matrix.version }}
              echo "::set-env name=CC::gcc-${{ matrix.version }}"
              echo "::set-env name=CXX::g++-${{ matrix.version }}"
            else
              sudo apt-get install -y clang-${{ matrix.version }}
              echo "::set-env name=CC::clang-${{ matrix.version }}"
              echo "::set-env name=CXX::clang++-${{ matrix.version }}"
            fi
      - name: Print version
        run: |
          cmake --version
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            gcc --version
          else
            clang --version
          fi

      - name: configure
        run: mkdir build && cd build && cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DBOOST_ROOT=/usr/include/boost ..
      - name: build
        run: cd build && cmake --build . --target install
      - name: Testing RTC
        run: |
         cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
         (timeout --signal=SIGABRT 100 ./Kernel -c ./test/test_kernel.json &) && (timeout --signal=SIGABRT 100 ./test_rtc) && kill -SIGINT `pgrep Kernel`
      - name: Testing inheritance
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 100 ./Kernel &) && (timeout --signal=SIGABRT 100 ./test_inheritance) && kill -SIGINT `pgrep Kernel`
      - name: Testing errors
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 100 ./Kernel &) && (timeout --signal=SIGABRT 100 ./test_errors) && kill -SIGINT `pgrep Kernel`
      - name: Testing selection
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 100 ./Kernel &) && (timeout --signal=SIGABRT 100 ./test_selection) && kill -SIGINT `pgrep Kernel`
      - name: Testing high load
        run: |
          cd build/binary/bin && export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../lib
          (timeout --signal=SIGABRT 100 ./Kernel &) && (timeout --signal=SIGABRT 100 ./test_of_speed) && kill -SIGINT `pgrep Kernel`

      - name: Store artifact
        uses: actions/upload-artifact@master
        with:
          name: UDT-bunary-${{ matrix.name }}-${{ github.sha }}
          path: build/binary/

  build_windows:
    strategy:
      matrix:
        configuration: [Release]
        compiler: [MSVC,MinGW]
        arch: [Win32, x64]
        exclude:
          - configuration: Debug
            compiler: MinGW
            arch: x64
          - configuration: Debug
            compiler: MinGW
            arch: Win32
    name: Windows
    runs-on: windows-2019
    steps:
      - name: Prepare Environment
        run: |
          choco install wget
          choco install tartool
          choco install mingw
          choco install windows-kill
          choco install grep
          choco install awk
      - uses: actions/checkout@v1

      - name: Install boost
        shell: bash
        run: |
          wget -nv http://downloads.sourceforge.net/project/boost/boost/1.56.0/boost_1_56_0.tar.bz2
          tar --bzip2 -xf boost_1_56_0.tar.bz2
      - name: Configure CMake
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
          ARCHITECTURE: ${{ matrix.arch }}
        shell: bash
        run: |
          mkdir build
          cd build
          if [ "$COMPILER" = "MinGW" ]; then
              cmake -DBOOST_ROOT=./boost_1_56_0 -DCMAKE_BUILD_TYPE=$CONFIGURATION  -DCMAKE_SH="CMAKE_SH-NOTFOUND" -G "MinGW Makefiles" ..
          else
              cmake -DBOOST_ROOT=./boost_1_56_0 -G "Visual Studio 16 2019" -T "v142" -A "$ARCHITECTURE" ..
          fi
      - name: Compile
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          if [ "$COMPILER" = "MinGW" ]; then
              cmake --build . --config "$CONFIGURATION" --target install
          else
              cmake --build . --config "$CONFIGURATION" --target install -- /verbosity:minimal
          fi
      - name:  Testing RTC
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          timeout --signal=SIGABRT 100 ./Kernel -c ./test/test_kernel.json &
          timeout --signal=SIGABRT 100 ./test_rtc
          taskkill //F //IM Kernel.exe
      - name:  Testing inheritance
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_inheritance
          taskkill //F //IM Kernel.exe
      - name:  Testing errors
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        if: runner.configuration == 'Release'
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_errors
          taskkill //F //IM Kernel.exe
      - name:  Testing speed
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_of_speed
          taskkill //F //IM Kernel.exe
      - name: Store artifact
        uses: actions/upload-artifact@master
        with:
          name: UDT-bunary-${{ matrix.compiler }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
          path: build/binary/