name: MinGW

on: [push]

jobs:
  build_mingw:
    strategy:
      matrix:
        configuration: [Release,Debug]
        compiler: [MinGW]
        arch: [i686,x86_64]
    name: Windows
    runs-on: windows-2019
    env:
      MSYS_ROOT: ${{ matrix.compiler}}${{ matrix.arch}}
    steps:
      - uses: actions/checkout@v1
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git base-devel mingw-w64-${{ matrix.arch }}-toolchain
      - name: Set variables
        id: vars
        shell: bash
        run: |
          # Set git branch or git tag as slug
          if [[ ${GITHUB_REF} =~ ^refs\/tags\/ ]]; then
            GIT_TYPE=TAG
          else
            GIT_TYPE=BRANCH
            if [ -n "${GITHUB_HEAD_REF}" ]; then
              GIT_SLUG="${GITHUB_HEAD_REF}"
            else
              GIT_SLUG="${GITHUB_REF/refs\/heads\//}"
            fi
          fi
          # Export variable
          # # https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-environment-variable-set-env
          echo ::set-env name=GIT_TYPE::${GIT_TYPE}
          echo ::set-env name=GIT_SLUG::${GIT_SLUG}
      - name: Install mingwX86 Packages
        env:
          MINGW_ARCH: ${{ matrix.arch }}
        shell: msys2 {0}
        run: |
          pacman --noconfirm --needed -S git base-devel mingw-w64-${{ matrix.arch }}-toolchain mingw-w64-${{ matrix.arch }}-boost mingw-w64-${{ matrix.arch }}-cmake
          pacman --noconfirm --needed -S  doxygen mingw-w64-${{ matrix.arch }}-nsis
          pacman --noconfirm -Scc
      - name: Configure CMake
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: cmd
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=%CONFIGURATION%  -DCMAKE_SH="CMAKE_SH-NOTFOUND" -G "MinGW Makefiles" ..
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cmake-build-files-${{ matrix.compiler }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
          path: build
      - name: Compile
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
        shell: cmd
        run: |
          cmake --build . --config "%CONFIGURATION%" --target install
      - name:  SHARE unit test
        working-directory: ./build/binary/bin
        shell: bash
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
            timeout --signal=SIGABRT 100 ./unit_tests
      - name:  Testing RTC
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
          timeout --signal=SIGABRT 100 ./Kernel -c ./tests/test_kernel.json &
          timeout --signal=SIGABRT 100 ./test_rtc
          taskkill //F //IM Kernel.exe
      - name:  Testing inheritance
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_inheritance
          taskkill //F //IM Kernel.exe
      - name:  Testing errors
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        if: startsWith(github.ref, 'refs/tags/') == false && matrix.configuration != 'Debug'
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_errors
          taskkill //F //IM Kernel.exe
      - name:  Testing high load
        working-directory: ./build/binary/bin
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
        shell: bash
        if: startsWith(github.ref, 'refs/tags/') == false
        run: |
          timeout --signal=SIGABRT 100 ./Kernel &
          timeout --signal=SIGABRT 100 ./test_of_speed
          taskkill //F //IM Kernel.exe
      - name: build package
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
          ARCHITECTURE: ${{ matrix.arch }}
        shell: cmd
        run: |

          cmake -DCMAKE_INSTALL_PREFIX="" -DCMAKE_BUILD_TYPE=%CONFIGURATION%  -DCMAKE_SH="CMAKE_SH-NOTFOUND" -G "MinGW Makefiles" ..
          cmake --build . --target doc_SHARE
          cmake --build . --target doc_UDT
          cmake --build . --target package
      - name: Rename package
        working-directory: ./build
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
          ARCHITECTURE: ${{ matrix.arch }}
        shell: bash
        run: |
          cd ./binary/package
          for file in *.exe ; do mv "$file" "${file%%.exe}-${{ matrix.compiler }}-latest-${{ matrix.arch }}-${{ matrix.configuration }}.exe" ; done
      - name: Store artifact
        uses: actions/upload-artifact@master
        with:
          name: UDT-binary-${{ matrix.compiler }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}
          path: build/binary/

      - name: create binary
        env:
          CONFIGURATION: ${{ matrix.configuration }}
          COMPILER: ${{ matrix.compiler }}
          ARCHITECTURE: ${{ matrix.arch }}
        shell: bash
        run: |
          tar -czvf UDT-binary-${{ matrix.compiler }}-${{ matrix.arch }}-${{ matrix.configuration }}-${{ github.sha }}.tar.gz build/binary
      - name: GitHub Releases
        if: github.event.pull_request.base.repo.id == github.event.pull_request.head.repo.id
          && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
        uses: softprops/action-gh-release@v1
        with:
          files: build/binary/package/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}