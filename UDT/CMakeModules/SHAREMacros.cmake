#
# Configuration logging og project
#
macro(configure_logging _DEP_PATH)
	
	SET(GLOG_ROOT_DIR ${_DEP_PATH}/glog)
	FIND_PACKAGE(glog)

	SET(LOG4CPLUS_ROOT_DIR ${_DEP_PATH}/log4cplus)
	FIND_PACKAGE(log4cplus)

	OPTION(LOGGING_TO_GLOG "Using glog for loging" OFF)
	OPTION(LOGGING_TO_LOG4CPLUS "Using log4cplus for loging" OFF)
	OPTION(LOGGING_TO_COUT "Logging to cout" OFF)

	SET(LOGGING_INCLUDES "" CACHE INTERNAL  "" FORCE)
	SET(LOGGING_LIBRARIES "" CACHE INTERNAL  "" FORCE)
	SET(LOGGING_DEFENITIONS "" CACHE INTERNAL  "" FORCE)
	
	IF (LOGGING_TO_GLOG)
		if(NOT GLOG_FOUND)
			message(FATAL "Failed to find GLOG.")	
			return()
		endif()
		
		SET(LOGGING_DEFENITIONS "-DGLOG" CACHE INTERNAL  "" FORCE)
		
		SET(LOGGING_INCLUDES ${GLOG_INCLUDE_DIRS} CACHE INTERNAL  "LOGGING_INCLUDES" FORCE)
		SET(LOGGING_LIBRARIES ${GLOG_LIBRARIES} CACHE INTERNAL  "LOGGING_LIBRARIES" FORCE)
		
	ELSEIF (LOGGING_TO_LOG4CPLUS)
		if(NOT LOG4CPLUS_FOUND)
			message(FATAL "Failed to find log4cplus.")	
			return()
		endif()
		
		SET(LOGGING_DEFENITIONS "-DCPLUS_LOG" CACHE INTERNAL  "" FORCE)
		
		SET(LOGGING_INCLUDES ${LOG4CPLUS_INCLUDES} CACHE INTERNAL  "LOGGING_INCLUDES" FORCE)
		SET(LOGGING_LIBRARIES ${LOG4CPLUS_LIBRARIES} CACHE INTERNAL  "LOGGING_LIBRARIES" FORCE)
		
	ELSEIF (LOGGING_TO_COUT)
		SET(LOGGING_DEFENITIONS "-DCOUT_LOG" CACHE INTERNAL  "" FORCE)
	ELSE()
		SET(LOGGING_DEFENITIONS "-DNOLOG" CACHE INTERNAL  "" FORCE)
	ENDIF ()

	
	list(REMOVE_DUPLICATES LOGGING_LIBRARIES)
	list(REMOVE_DUPLICATES LOGGING_INCLUDES)
endmacro()
macro(configure_version _PREFIX _FILE_PATH _MAJOR _MINOR)	
	# Make a version file containing the current version from git.
	SET(${_PREFIX}_MAJOR_VERSION ${_MAJOR} CACHE STRING "" FORCE)
	SET(${_PREFIX}_MINOR_VERSION ${_MINOR} CACHE STRING "" FORCE)
	SET(${_PREFIX}_REVISION_VERSION "0" CACHE STRING "" FORCE)
	SET(${_PREFIX}_PATH "no path" CACHE STRING "" FORCE)

	OPTION(${_PREFIX}_EMBED_GIT_SHA "Embeds the GIT SHA in the version code" ON)

	IF (${_PREFIX}_EMBED_GIT_SHA)
		include(GetGitRevisionDescription)
		git_describe(VERSION --tags --dirty=-d)

	#parse the version information into pieces.
		IF(NOT VERSION  MATCHES  "-NOTFOUND")
			STRING(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.([0-9]+).*" "\\1" ${_PREFIX}_PATH "${VERSION}")
			STRING(REGEX REPLACE "^v[0-9]+\\.[0-9]+\\.[0-9]+(.*)" "\\1" ${_PREFIX}_REVISION_VERSION "${VERSION}")
		ELSE(NOT VERSION  MATCHES  "-NOTFOUND")
			message("Cannot get revisiob from git:" "${VERSION}" ) 
		ENDIF (NOT VERSION  MATCHES  "-NOTFOUND")
	ENDIF (${_PREFIX}_EMBED_GIT_SHA)

	STRING(TIMESTAMP ${_PREFIX}_TIME "%H:%M:%S" )
	STRING(TIMESTAMP ${_PREFIX}_DATA "%Y-%m-%d" )

	SET(${_PREFIX}_VERSION 
	${${_PREFIX}_MAJOR_VERSION}.${${_PREFIX}_MINOR_VERSION}.${${_PREFIX}_REVISION_VERSION})
	
	configure_file(${_FILE_PATH}/revision.c.in
                ${_FILE_PATH}/revision.c)	
endmacro()