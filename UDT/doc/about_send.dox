/**
@defgroup  about_send How To Send
@{
The system was developed for decrease the number of copy operation that 
needed to send the data. For this, In the system isn't used serialize and deserialize operation.
And all data is transmitted by pointer, that is if you transmit data between two programs which
works in on the same computer, then the pointers to the data in the both programs will be equal.

The typical pseudocode of send opration can be represented as follows:
Assume that we have struct "A" that need to be sent.

1) Allocates memory in memory that is common to all processes in the operation system 
@code
NSHARE::CBuffer _p_buf=CCustomer::MGetNewBuf(sizeof(A));
@endcode

2) Creates the object of type A in the allocated memory
@code
A * _p_data=new (_p_buf.ptr()) A;
@endcode

Now You can fill object of type A.
What if You have an array with dynamic size in the struct A or the pointer to the other data?
Shoot yourself? No, it isn't. The system can send multiple buffers in one "message".
You have to alloacate the memory for this data too. For array, you can 
use #NSHARE::CPODBuffer which is similar to std::vector.
@}
*/

