{% set file_name = 'protocol_' + name | lower + '_swap_endian' %}
{% import "base_macros.tmpl" as common %}
{{ common.add_file_secription(file_name+'.h',author,version) }}
{% autoescape false %}

#ifndef {{ file_name | upper }}_H
#define {{ file_name | upper }}_H

#include <deftype>
# include <{{ name | upper }}/config/config.h>
#include "{{ common.get_namespace(name) }}.h"

namespace {{ common.get_namespace(name) }}
{
{% macro swap_endian_message(aMsg) %}
    {%  set struct_name =  aMsg.___name+'_t' %}

    {{ struct_name }} * const _msg = static_cast<{{ struct_name }}*> (aP);

    {% for field in aMsg.___fields %}
        {% if  'bits' in field and field.bits > 0  %}
        {% elif 'array_len' in field and field.array_len  > 0%}
    for (unsigned i=0; i< sizeof(_msg->{{ field.id }})/sizeof(_msg->{{ field.id }}[0]); ++i)
            _msg->{{field.id}}[i] = NSHARE::swap_endain<{{field.type}}>(_msg->{{field.id}}[i]);
        {% elif field.LogicalType|string() == "dynamic array"  %}
    for (unsigned i=0; i< _msg->{{field.id}}.size(); ++i)
            _msg->{{field.id}}[i] = NSHARE::swap_endain<{{field.DynamicType}}>(_msg->{{field.id}}[i]);
        {% else %}
    _msg->{{field.id}} = NSHARE::swap_endain<{{field.type}}>(_msg->{{field.id}});
        {% endif %}
    {% endfor %}

    {% for fields in aMsg.___fields | bit_field %}
    {
        /*! Swap bit fields
        *
        * @note bit sequence in bitfield isn't standardized
        */
        union
        {
            struct
            {
        {% for field in fields.fields %}
                {{field.type}} {{field.id }}:{{  field.bits }};
        {% endfor %}
            };
            {{fields.type}} value;
        } _value;

#ifdef COMPILE_ASSERT
       COMPILE_ASSERT(sizeof(_value) == sizeof({{ fields.type }}), InvalidSizeOfField);
#endif
        {% for field in fields.fields %}
        _value.{{field.id }} = _msg->{{field.id }};
        {% endfor %}
        _value.value = NSHARE::swap_endain<{{fields.type}}>(_value.value);

        {% for field in fields.fields %}
        _msg->{{field.id }} = _value.{{field.id }};
        {% endfor %}
    }
    {% endfor %}
{% endmacro %}

/*! Swap message endian
*
* return true if no error
*/
template <typename T>
inline  bool swap_endian_of(T*)
{
    return false;
}
{% set struct_header_name =  header.___name+'_t' %}



/*! Predefined  of specialized function
 *
 * @{
 */
template <>
inline bool swap_endian_of<{{ struct_header_name }}> ({{ struct_header_name }}* aP);
{% for msg in messages %}
    {%  set struct_name =  msg.___name+'_t' %}
template <>
inline bool swap_endian_of<{{ struct_name }}> ({{ struct_name }}* aP);
{% endfor %}
///@}

/** Swap endian for header
*/
template <>
inline bool swap_endian_of<{{ struct_header_name }}> ({{ struct_header_name }}* aP)
{
    {{  swap_endian_message(header) }}
    return true;
}
{% for msg in messages %}
    {%  set struct_name =  msg.___name+'_t' %}

/*! Swap endian function of {{ msg.___name }}
*
* return true if no error
*/
template <>
inline bool swap_endian_of<{{ struct_name }}> ({{ struct_name }}* aP)
{
    bool _is = swap_endian_of(static_cast<{{ struct_header_name }}*>(aP));

    {%  if  '___parent' in msg and msg.___parent %}
        {% for parent in messages if parent.___number|string() == msg.___parent|string() %}
            {%  set parent_name =  parent.___name+'_t' %}
    _is = _is && swap_endian_of(static_cast<{{ parent_name }}*>(aP));
        {% endfor %}
    {% endif %}

    {{  swap_endian_message(msg) }}

    return _is;
}
{% endfor %}
}
#endif /* {{ file_name | upper }}_H */
{% endautoescape %}
