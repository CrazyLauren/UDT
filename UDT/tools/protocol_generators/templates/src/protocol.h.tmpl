{%- set file_name = 'protocol_' + name | lower %}
{%- import "base_macros.tmpl" as common %}
{{ common.add_file_secription(file_name+'.h',author,version) }}
{%- autoescape false %}

#ifndef {{ file_name | upper }}_H
#define {{ file_name | upper }}_H

#  include <{{ name | upper }}/config/config.h>

#ifdef HAVE_STDINT_H
#  include <stdint.h>
#endif
#include <string.h>
#include <iostream>

#if (_MSC_VER >= 800) || defined(_STDCALL_SUPPORTED) || defined(__BORLANDC__) || defined(__LCC__)
#	define ATTRIBUTE_PACKED( ... ) __pragma(pack(push,1) ) __VA_ARGS__; __pragma( pack(pop) )
#elif defined( __GNUC__ ) ||defined(__QNX__)
#	define ATTRIBUTE_PACKED(...)  __VA_ARGS__  __attribute__((packed))
#else
# 	warning "The packed attribute is not defined"
#	define ATTRIBUTE_PACKED ( ... ) __VA_ARGS__
#endif

namespace {{ file_name }}
{
#define PROTOCOL_NAME "{{ name }}" ///<Unique protocol name.Recommended using a short name

/*!\brief A message numbers of {{ name }}
 *
 */
enum  eMessage
{
{% for msg in messages|sort(attribute='number') %}  {{ msg.name.rjust(20)|upper }} = {{ msg.number }}, //!< {{ msg.description }}
{% endfor -%}
};

/*!\brief A user error number which is passed
 * to field NUDT::fail_sent_args_t::FUserCode
 *
 */
enum eParserError
{
	E_INVALID_HEADER_SIZE   = 1,//!< The message of header is invalid
	E_INVALID_MSG_SIZE      = 2,//!<The message size is invalid
	E_INVALID_MSG_TYPE      = 3,//!<The message type is invalid
};

{% macro generate_message(aMsg, aParent) -%}

/*!\brief {{ aMsg.description }}
 *
 */
{%  set struct_name =  aMsg.name+'_t' -%}
{%  set paret_name =  ':'+aParent+'_t' if aParent else '' -%}

ATTRIBUTE_PACKED(struct {{ struct_name }}{{ paret_name }}
{
    {% for field in aMsg.fields -%}
        {%  if  'bits' in field and field.bits > 0  -%}
            {{  field.type }} {{  field.id }}:{{  field.bits -}}
        {% else %}
        {%if 'array_len' in field and field.array_len  > 0 -%}
            {{  field.type }} {{  field.id }}[{{  field.array_len }}]
        {% else %}
            {{  field.type }} {{  field.id -}}
        {% endif -%}
        {% endif -%}
        ; //!< {{ field.description }}
    {% endfor %}

	/*! @brief default constructor
	 *
	 */
    {{ struct_name }}()
    {
        memset(this,0,sizeof(*this));
    }
#ifdef SHARE_CONFIG_DEFINED
	/*! @brief Deserialize message of {{ aMsg.name }}
	 */
    {{ struct_name }}(NSHARE::CConfig const& aConf);

    /*! @brief Serialize message of {{ aMsg.name }}
	 */
	NSHARE::CConfig MSerialize() const;

    /*! @brief check is valid message
    */
	bool MIsValid()const
    {
        return true;
    }
#endif
});
#ifdef SHARE_CONFIG_DEFINED
inline {{ struct_name }}::{{ struct_name }}(NSHARE::CConfig const& aConf)
{
    memset(this,0,sizeof(*this));

    {% for field in aMsg.fields -%}
         {%if 'array_len' in field and field.array_len  > 0 -%}
            {
	        const NSHARE::ConfigSet& _child = aConf.MChildren("{{ field.id }}");
	        {
		        NSHARE::ConfigSet::const_iterator _it = _child.begin(), _it_end =
				    _child.end();

		        for (unsigned i=0; i< sizeof({{ field.id }})/sizeof({{ field.id }}[0]) &&//
                                _it != _it_end ; ++i,++_it)
			        {{ field.id }}[i]=_it->MValue({{  field.type }}());
	        }
            }
        {% else %}
            {
            {{  field.type }} _tmp_{{ field.id }};
            if(aConf.MGetIfSet("{{ field.id }}", _tmp_{{ field.id }} ))
                {{ field.id }}=_tmp_{{ field.id }} ;
            }
        {% endif -%}

    {% endfor %}
}
inline NSHARE::CConfig {{ struct_name }}::MSerialize() const
{
	NSHARE::CConfig _conf("{{ name }}");
    {% for field in aMsg.fields -%}
         {%if 'array_len' in field and field.array_len  > 0 -%}
             for (unsigned i = 0; i < sizeof({{ field.id }})/sizeof({{ field.id }}[0]); ++i)
             {
		        _conf.MAdd("{{ field.id }}", {{ field.id }}[i]);
             }
        {% else %}
            _conf.MSet("{{ field.id }}", {{ field.id }} );
        {% endif -%}

    {% endfor %}
	return _conf;
}
#endif
{% if full_size in  aMsg %}
#if (__cplusplus>= 201103L) || (_MSC_VER >= 1800)
    static_assert(sizeof({{ struct_name }}) == sizeof({{ aMsg.full_size }}), "invalid size of message {{ aMsg.name }}");
#endif
{% endif %}

inline std::ostream& operator<<(std::ostream & aStream,
    {{ struct_name }} const& aVal)
{
    {% for field in aMsg.fields -%}
        aStream<<"{{  field.id }} = "<<aVal.{{ field.id }}<<std::endl;
    {% endfor %}
	return aStream;
}
{% endmacro %}

{{ generate_message(header) }}

{% for msg in messages-%}
    {%  if  'parent' in msg -%}
        {% for parent in messages if parent.number|string() == msg.parent|string() -%}
            {{ generate_message(msg,parent.name) }}
        {% endfor %}
    {% else %}
        {{ generate_message(msg,header.name) }}
    {% endif %}
{% endfor %}


}
#undef ATTRIBUTE_PACKED
#endif /* {{ file_name | upper }}_H */
{%- endautoescape %}
