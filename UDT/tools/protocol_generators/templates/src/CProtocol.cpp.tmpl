// This is a personal academic project. Dear PVS-Studio, please check it.
// PVS-Studio Static Code Analyzer for C, C++, C#, and Java: http://www.viva64.com
{%- import "base_macros.tmpl" as common %}
{%- set file_name = 'CProtocol_' + name  %}
{{ common.add_file_secription(file_name+'.cpp') }}
{%- autoescape false %}

#include <deftype>
#include <udt/CParserFactory.h>

#include "{{ file_name + '.h' }}"
#include "protocol_{{ name | lower }}.h"


using namespace NUDT;
//using namespace protocol_inherited;
NSHARE::CText const {{file_name}}::NAME = "{{ name }}";

{{file_name}}::{{file_name}}() :
		IExtParser(NAME)
{

}

{{file_name}}::~{{file_name}}()
{
}
size_t {{file_name}}::MDataOffset(const NUDT::required_header_t& aHeader) const
{
	/*! In the example protocol the data is begun after header.*/
	//return sizeof(msg_head_t);
}
{{file_name}}::result_t {{file_name}}::MParserData(
		const uint8_t* aItBegin, const uint8_t* aItEnd,
    NSHARE::uuid_t aFrom,uint8_t aMask)
{
	using namespace std;
	/*! Algorithm of Parsing buffer from aItBegin to aItEnd:*/
	result_t _result;

	return _result;

}
std::pair<NUDT::required_header_t,bool> {{file_name}}::MHeader(
		const NSHARE::CConfig& aFrom) const
{
	/*! This is example of deserialization of the message header.*/

/*	NUDT::required_header_t _header;
	_header.FNumber=aFrom.MValue("num",0u);
	_header.FVersion=NSHARE::version_t(aFrom.MChild("ver"));
	return std::make_pair(_header, aFrom.MIsChild("num"));*/
}
NSHARE::CConfig {{file_name}}::MToConfig(
		const NUDT::required_header_t& aHeader) const
{
	/*! This is example of serialization  the message header.*/

    /*
	NSHARE::CConfig _conf("head");
	_conf.MAdd("num",aHeader.FNumber);
	_conf.MAdd("ver",aHeader.FVersion.MSerialize());
	return _conf;*/
}
bool {{file_name}}::MSwapEndian(const NUDT::required_header_t& aHeader,
		uint8_t* aItBegin, uint8_t* aItEnd) const
{
	return false;
}
bool {{file_name}}::MSwapEndian(NUDT::required_header_t* aHeader) const
{
	/*! You has to be defined method for swapping byte order
	 * of the header message.*/
	//aHeader->FNumber=NSHARE::swap_endain(aHeader->FNumber);
	return true;
}

{{file_name}}::inheritances_info_t {{file_name}}::MGetInheritances() const
{
	inheritances_info_t const _info;
	/*{ //
	msg_inheritance_t( //
			sub_sub_msg_t::header(), //
			sub_msg_t::header() //
			),//
	msg_inheritance_t(
	//
			sub_msg_t::header(), //
			parent_msg_t::header() //
			) //
	};
    */
	return _info;
}


REGISTRE_ONLY_ONE_PROTOCOL_MODULE({{file_name}},{{ name|upper }});

{% endautoescape %}