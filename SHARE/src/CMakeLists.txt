SET(TARGET_NAME SHARE)
SET(SHARE_TARGET_NAME ${TARGET_NAME})

OPTION(LOGGING_IS_DISABLED_IN_${TARGET_NAME} "Disable logging in share library" ON)

SET(PATH_TO_REVISION_IN ${CMAKE_CURRENT_SOURCE_DIR}/revision.c.in CACHE INTERNAL  "" FORCE)

configure_version(${TARGET_NAME} ${CMAKE_CURRENT_SOURCE_DIR} 0 1)

OPTION(SHARE_NO_STATRUP_TEST "Disable  start up tests " ON)

mark_as_advanced(SHARE_NO_STATRUP_TEST)

IF (SHARE_NO_STATRUP_TEST)
	add_definitions(-DNO_SHARE_TEST)
ENDIF ()


add_definitions(${LOGGING_DEFENITIONS})
IF (LOGGING_IS_DISABLED_IN_${TARGET_NAME})
	add_definitions(-DNOLOG)
ENDIF ()

				
file(GLOB_RECURSE TARGET_SRC ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
list (APPEND TARGET_SRC    ${CMAKE_CURRENT_SOURCE_DIR}/revision.c)		

file (GLOB CORE_HEADER_FILES ../include/*.h ../include/*.hpp)
list (APPEND CORE_HEADER_FILES    ${CMAKE_CURRENT_SOURCE_DIR}/../include/deftype)


file (GLOB LOGGING_HEADER_FILES ../include/logging/*.h ../include/logging/*.hpp)
file (GLOB SOCKET_HEADER_FILES ../include/Socket/*.h ../include/Socket/*.hpp)
file (GLOB UTYPE_HEADER_FILES ../include/UType/*.h ../include/UType/*.hpp)
file (GLOB UTYPE_EXT_HEADER_FILES ../include/UType/ext/*.h ../include/UType/ext/*.hpp)

set (SHARE_HEADERS ${CORE_HEADER_FILES} ${SOCKET_HEADER_FILES} ${UTYPE_HEADER_FILES} ${UTYPE_EXT_HEADER_FILES} ${LOGGING_HEADER_FILES})


IF (NOT SHARE_DEX_SOCKET)
	list (REMOVE_ITEM TARGET_SRC CDex.cpp)
ENDIF ()
	
	
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../include 
					${Boost_INCLUDE_DIRS} 
					${RAPIDJSON_INCLUDES} 
					${TCLAP_INCLUDES} 
					${LOGGING_INCLUDES})	
share_add_library(${TARGET_NAME} FALSE TARGET_SRC SHARE_HEADERS TRUE)

IF (WIN32)

	set (PLATFORM_LIBS ${PLATFORM_LIBS} ws2_32 ole32 oleaut32 Psapi Setupapi uuid  CACHE STRING     "PLATFORM_LIBS" FORCE)
ELSEIF (UNIX)
	IF(QNX)
		SET(PLATFORM_LIBS socket m ${PLATFORM_LIBS} CACHE STRING     "PLATFORM_LIBS" FORCE)
	ELSE()
		SET(PLATFORM_LIBS  pthread dl rt ${PLATFORM_LIBS} CACHE STRING     "PLATFORM_LIBS" FORCE)
	ENDIF()
ENDIF()
set(_PLATFORM_LIBS ${PLATFORM_LIBS})
list(REMOVE_DUPLICATES _PLATFORM_LIBS)

SET(PLATFORM_LIBS ${_PLATFORM_LIBS}  CACHE STRING "Platform library" FORCE)

share_target_link_libraries(${TARGET_NAME} ${PLATFORM_LIBS} ${LOGGING_LIBRARIES} )
#target_link_libraries(${TARGET_NAME} ${PLATFORM_LIBS} ${LOGGING_LIBRARIES} )



install(FILES ${CORE_HEADER_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
install(FILES ${LOGGING_HEADER_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include/logging)
install(FILES ${SOCKET_HEADER_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include/Socket)
install(FILES ${UTYPE_HEADER_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include/UType)
install(FILES ${UTYPE_EXT_HEADER_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/include/UType/ext)

SET(SHARE_LIBRARIES  ${TARGET_NAME} CACHE STRING "SHARE_LIBRARIES" FORCE)#fixme must be filepath

set(SHARE_FOUND TRUE CACHE BOOL  "SHARE_FOUND" FORCE)	
		
